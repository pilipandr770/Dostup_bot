import asyncio
import logging
import os
import time
import sys
from pathlib import Path

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           KeyboardButton, ReplyKeyboardMarkup)
from dotenv import load_dotenv
import openai
# –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ API –Ω–∞–º –Ω—É–∂–µ–Ω –º–æ–¥—É–ª—å stripe
import stripe

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –ù–ê–°–¢–†–û–ô–ö–ê –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º DEBUG —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("c:\\Users\\–ü–ö\\dostup_bot\\bot_debug.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)
logger.info("=== –ó–ê–ü–£–°–ö –ë–û–¢–ê –° –†–ê–°–®–ò–†–ï–ù–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú ===")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ CONFIG ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
BOT_TOKEN           = os.getenv('BOT_TOKEN')
COURSE_CHANNEL_ID   = os.getenv('COURSE_CHANNEL_ID')
YOUTUBE_CHANNEL_URL = os.getenv('YOUTUBE_CHANNEL_URL')
CHANNEL_INVITE_LINK = os.getenv('CHANNEL_INVITE_LINK')
OPENAI_API_KEY      = os.getenv('OPENAI_API_KEY')
OPENAI_ASSISTANT_ID = os.getenv('OPENAI_ASSISTANT_ID')
# URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–ø–ª–∞—Ç—ã Stripe
STRIPE_PAYMENT_URL  = os.getenv('STRIPE_PAYMENT_URL', 'https://buy.stripe.com/9B6fZg4TTcbwc6V7gT3Nm00')
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '403758011'))

logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: BOT_TOKEN={'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if BOT_TOKEN else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}, COURSE_CHANNEL_ID={COURSE_CHANNEL_ID}")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—é—á—ñ–≤
if not BOT_TOKEN or BOT_TOKEN == 'YOUR_REAL_BOT_TOKEN_HERE':
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!")
    raise SystemExit(1)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ OpenAI ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
openai_client_ready = False
if OPENAI_API_KEY and OPENAI_API_KEY != 'your_openai_api_key_here':
    openai.api_key = OPENAI_API_KEY
    openai_client_ready = True
    logger.info("OpenAI API —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
else:
    logger.warning("OpenAI API-–∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî —Ñ—É–Ω–∫—Ü—ñ—ó Assistant –≤–∏–º–∫–Ω–µ–Ω—ñ")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ Stripe ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API Stripe –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
stripe_client_ready = False
# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
STRIPE_API_KEY = os.getenv('STRIPE_API_KEY')
if STRIPE_API_KEY and STRIPE_API_KEY != 'your_stripe_api_key_here':
    stripe.api_key = STRIPE_API_KEY
    stripe_client_ready = True
    logger.info("Stripe API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
else:
    logger.warning("STRIPE_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ Aiogram ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
bot     = Bot(BOT_TOKEN)
storage = MemoryStorage()
dp      = Dispatcher(bot, storage=storage)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ FSM ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class QuestionStates(StatesGroup):
    waiting_for_question = State()
    
class PaymentCheckStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_name = State()

class AgreementStates(StatesGroup):
    waiting_for_agb = State()
    waiting_for_widerruf = State()
    waiting_for_datenschutz = State()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ DATA ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫—É—Ä—Å –∑–∞ 149‚Ç¨
COURSE_TITLE = "–£—Å–ø–µ—à–Ω—ã–π YouTube-–±–∏–∑–Ω–µ—Å —Å –Ω—É–ª—è"
COURSE_DESCRIPTION = "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –∏ –∑–∞–∫—Ä—ã—Ç–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É"
COURSE_PRICE_EUR = 149

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ KEYBOARDS ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
main_menu = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üé¨ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫")],
        [KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 149‚Ç¨")],
        [KeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É")],
        [KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]
    ],
    resize_keyboard=True
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ Legal Documents Helpers ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ñ–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
LEGAL_DOCS = {
    "agb": """üìã –î–û–ö–£–ú–ï–ù–¢ 1: Allgemeine Gesch√§ftsbedingungen (AGB)
f√ºr den Online-Verkauf digitaler Inhalte (Online-Kurse)

1. Geltungsbereich
Diese Allgemeinen Gesch√§ftsbedingungen (AGB) gelten f√ºr alle Vertr√§ge zwischen Firma Alexander Cherkasky Schlitzer Strasse 6, 60386 Frankfurt am Main (nachfolgend ‚ÄûAnbieter") und dem Kunden √ºber den Erwerb und die Nutzung digitaler Inhalte, insbesondere Online-Kurse √ºber die Plattform YouTube oder andere digitale Plattformen.

2. Vertragsgegenstand
Vertragsgegenstand ist der Zugang zu einem Online-Kurs, der aus vorab aufgezeichneten Videolektionen besteht. Der Zugang erfolgt digital und ausschlie√ülich zur pers√∂nlichen Nutzung des Kunden.

3. Vertragsabschluss
Der Vertrag kommt zustande, sobald der Kunde den Bestellvorgang abgeschlossen und der Anbieter die Bestellung best√§tigt hat.

4. Preise und Zahlung
Alle angegebenen Preise verstehen sich als Endpreise in Euro. Die Zahlung erfolgt √ºber die im Bestellprozess angebotenen Zahlungsmethoden. Der Zugang zum Kurs wird nach erfolgreichem Zahlungseingang freigeschaltet.

5. Widerrufsrecht
Bei digitalen Inhalten besteht kein Widerrufsrecht, sobald die Ausf√ºhrung begonnen hat und der Kunde ausdr√ºcklich zugestimmt hat.

6. Haftung
Die Haftung des Anbieters ist auf Vorsatz und grobe Fahrl√§ssigkeit beschr√§nkt.

7. Anwendbares Recht
Es gilt deutsches Recht.
""",

    "widerruf": """üìã –î–û–ö–£–ú–ï–ù–¢ 2: Widerrufsverzicht

Ich stimme ausdr√ºcklich zu, dass der Anbieter mit der Ausf√ºhrung des Vertrages vor Ablauf der Widerrufsfrist beginnt.

Mir ist bekannt, dass ich bei vollst√§ndiger Vertragserf√ºllung durch den Anbieter mein Widerrufsrecht verliere, wenn der Vertrag auf meinen ausdr√ºcklichen Wunsch erf√ºllt wurde, bevor die Widerrufsfrist abgelaufen ist.

Bei digitalen Inhalten, deren Bereitstellung nicht auf einem k√∂rperlichen Datentr√§ger erfolgt, verliere ich mein Widerrufsrecht, sobald der Anbieter mit der Ausf√ºhrung begonnen hat, nachdem ich ausdr√ºcklich zugestimmt habe und best√§tigt habe, dass ich mein Widerrufsrecht bei Beginn der Ausf√ºhrung verliere.

Ich best√§tige hiermit meinen ausdr√ºcklichen Verzicht auf das Widerrufsrecht.
""",

    "datenschutz": """üìã –î–û–ö–£–ú–ï–ù–¢ 3: Datenschutzerkl√§rung

1. Datenerhebung und -verarbeitung
Wir erheben und verarbeiten personenbezogene Daten nur im Rahmen der gesetzlichen Bestimmungen der DSGVO.

2. Zweck der Datenverarbeitung
Ihre Daten werden ausschlie√ülich zur Abwicklung des Kaufvertrages und zur Bereitstellung des erworbenen Online-Kurses verwendet.

3. Datenweitergabe
Eine Weitergabe Ihrer Daten an Dritte erfolgt nur, soweit dies zur Vertragsabwicklung erforderlich ist (z.B. Zahlungsabwicklung).

4. Ihre Rechte
Sie haben das Recht auf Auskunft, Berichtigung, L√∂schung und Einschr√§nkung der Verarbeitung Ihrer Daten.

5. Kontakt
F√ºr Fragen zum Datenschutz kontaktieren Sie uns unter: [Kontaktdaten]

Mit der Zustimmung erkl√§ren Sie sich mit der Verarbeitung Ihrer Daten gem√§√ü dieser Datenschutzerkl√§rung einverstanden.
"""
}

async def get_document(doc_name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
    logger.debug(f"–ó–∞–ø—Ä–æ—à–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {doc_name}")
    start_time = time.time()
    try:
        if doc_name in LEGAL_DOCS:
            doc_text = LEGAL_DOCS[doc_name]
            logger.debug(f"–î–æ–∫—É–º–µ–Ω—Ç {doc_name} –ø–æ–ª—É—á–µ–Ω –∏–∑ LEGAL_DOCS, –¥–ª–∏–Ω–∞: {len(doc_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return doc_text
        else:
            logger.error(f"–ó–∞–ø—Ä–æ—à–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {doc_name}")
            return "‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
    finally:
        end_time = time.time()
        logger.debug(f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_name}: {end_time - start_time:.4f} —Å–µ–∫")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
def get_agreement_keyboard(doc_type: str) -> InlineKeyboardMarkup:
    """Returns keyboard for legal document agreement"""
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è {doc_type}")
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.row(
        InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"agree_{doc_type}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_agreement")
    )
    return keyboard

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ OpenAI helper ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI Assistant API —Ç—Ä–µ–±—É–µ—Ç—Å—è openai>=1.3.0
async def ask_assistant(question: str) -> str:
    if not openai_client_ready:
        return "‚ùå OpenAI Assistant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ OpenAI: {question[:50]}...")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI Assistants API (asst_...)
        thread = openai.beta.threads.create()
        openai.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=question
        )
        run = openai.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=OPENAI_ASSISTANT_ID
        )
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run
        import time
        while True:
            run_status = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
            if run_status.status == "completed":
                break
            elif run_status.status in ("failed", "cancelled", "expired"):
                return "‚ùå –û—à–∏–±–∫–∞ OpenAI Assistant. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            time.sleep(1)
        messages = openai.beta.threads.messages.list(thread_id=thread.id)
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        for msg in reversed(messages.data):
            if msg.role == "assistant":
                return msg.content[0].text.value
        return "‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."
    except Exception as e:
        logger.error(f"OpenAI Assistant error: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ OpenAI Assistant, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ Stripe helper ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def check_stripe_payment_by_email(email: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ email –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    if not stripe_client_ready:
        return False
    
    try:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ email: {email}")
        # –ò—â–µ–º –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π (–º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π)
        thirty_days_ago = int(time.time() - 30 * 24 * 60 * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Payment Intents
        payment_intents = stripe.PaymentIntent.list(
            limit=100,
            created={"gte": thirty_days_ago}
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
        for payment in payment_intents.data:
            if payment.status == 'succeeded':
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
                if hasattr(payment, 'customer') and payment.customer:
                    try:
                        customer = stripe.Customer.retrieve(payment.customer)
                        if customer.email and customer.email.lower() == email.lower():
                            logger.info(f"–ù–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è {email}: {payment.id}")
                            return True
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–µ: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
                if hasattr(payment, 'metadata') and payment.metadata:
                    payment_email = payment.metadata.get('email')
                    if payment_email and payment_email.lower() == email.lower():
                        logger.info(f"–ù–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è {email} –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {payment.id}")
                        return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Checkout Sessions
        try:
            checkout_sessions = stripe.checkout.Session.list(
                limit=100,
                created={"gte": thirty_days_ago}
            )
            
            for session in checkout_sessions.data:
                if session.payment_status == 'paid' and hasattr(session, 'customer_details'):
                    if session.customer_details.email and session.customer_details.email.lower() == email.lower():
                        logger.info(f"–ù–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è {email}: {session.id}")
                        return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–π: {e}")
                        
        logger.info(f"–ü–ª–∞—Ç–µ–∂–∏ –¥–ª—è {email} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False

async def check_stripe_payment_by_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–Ω–µ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫)"""
    if not stripe_client_ready:
        return False
    
    try:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∏–º–µ–Ω–∏: {name}")
        # –ò—â–µ–º –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = int(time.time() - 30 * 24 * 60 * 60)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
        normalized_name = name.lower().replace(' ', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Checkout Sessions (–æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ)
        try:
            checkout_sessions = stripe.checkout.Session.list(
                limit=100,
                created={"gte": thirty_days_ago}
            )
            
            for session in checkout_sessions.data:
                if session.payment_status == 'paid' and hasattr(session, 'customer_details'):
                    if session.customer_details.name:
                        customer_name = session.customer_details.name.lower().replace(' ', '')
                        if normalized_name in customer_name or customer_name in normalized_name:
                            logger.info(f"–ù–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è {name}: {session.id}")
                            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–π: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Payment Intents
        payment_intents = stripe.PaymentIntent.list(
            limit=100,
            created={"gte": thirty_days_ago}
        )
        
        for payment in payment_intents.data:
            if payment.status == 'succeeded':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
                if hasattr(payment, 'customer') and payment.customer:
                    try:
                        customer = stripe.Customer.retrieve(payment.customer)
                        if customer.name:
                            customer_name = customer.name.lower().replace(' ', '')
                            if normalized_name in customer_name or customer_name in normalized_name:
                                logger.info(f"–ù–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è {name}: {payment.id}")
                                return True
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–µ: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
                if hasattr(payment, 'metadata') and payment.metadata:
                    customer_name = payment.metadata.get('name')
                    if customer_name:
                        customer_name = customer_name.lower().replace(' ', '')
                        if normalized_name in customer_name or customer_name in normalized_name:
                            logger.info(f"–ù–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è {name} –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {payment.id}")
                            return True
                
        logger.info(f"–ü–ª–∞—Ç–µ–∂–∏ –¥–ª—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False

# –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É
async def send_course_access(user_id: int):
    """–í—ã–¥–∞—ë—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫ –∫—É—Ä—Å—É"""
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª
        if COURSE_CHANNEL_ID:
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
                await bot.approve_chat_join_request(
                    chat_id=COURSE_CHANNEL_ID,
                    user_id=user_id
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {COURSE_CHANNEL_ID}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        await bot.send_message(
            chat_id=user_id,
            text=(
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É.\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É: {CHANNEL_INVITE_LINK}\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è!"
            )
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
        try:
            await bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=f"üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
        try:
            await bot.send_message(
                chat_id=user_id,
                text=(
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É.\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É: {CHANNEL_INVITE_LINK}\n\n"
                    "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            )
        except Exception:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ HANDLERS ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message_handler(commands=["start"])
@dp.message_handler(lambda m: m.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def cmd_start(message: types.Message, state: FSMContext):
    logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ start –æ—Ç {message.from_user.id}")
    text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫—É—Ä—Å–∞ '{COURSE_TITLE}'!\n\n"
        "üé¨ –ü–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.\n\n"
        f"üí≥ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram-—Å–æ–æ–±—â–µ—Å—Ç–≤—É, –æ–ø–ª–∞—Ç–∏ —É—á–∞—Å—Ç–∏–µ ({COURSE_PRICE_EUR}‚Ç¨) ‚Äî –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—à—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞.\n\n"
        "‚ùì –í –ª—é–±–æ–µ –≤—Ä–µ–º—è –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ YouTube ‚Äî —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n\n"
        "–£–¥–∞—á–∏ –∏ –±–æ–ª—å—à–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ YouTube!"
    )
    await message.answer(text, reply_markup=main_menu)
    await state.finish()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —É—Ä–æ–∫ ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message_handler(lambda m: m.text.lower() == "üé¨ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫")
async def send_free_lesson(message: types.Message):
    logger.debug(f"–ó–∞–ø—Ä–æ—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –æ—Ç {message.from_user.id}")
    await message.answer(
        f"üé¨ –í–æ—Ç —Ç–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–∫!\n\n–°–º–æ—Ç—Ä–∏ –Ω–∞ YouTube: {YOUTUBE_CHANNEL_URL}",
        reply_markup=main_menu
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message_handler(lambda m: m.text.lower() == "üí≥ –æ–ø–ª–∞—Ç–∏—Ç—å 149‚Ç¨")
async def payment_start_agreement(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã")
    
    try:
        # –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        logger.debug(f"–ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç AGB –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        agb_text = await get_document("agb")
        logger.debug(f"–î–æ–∫—É–º–µ–Ω—Ç AGB –ø–æ–ª—É—á–µ–Ω –∑–∞ {time.time() - start_time:.4f} —Å–µ–∫")
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
        if len(agb_text) > 3900:
            logger.debug(f"–û–±—Ä–µ–∑–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç AGB (–¥–ª–∏–Ω–∞: {len(agb_text)})")
            agb_text = agb_text[:3900] + "...\n(–î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram)"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        logger.debug(f"–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è AGB")
        keyboard = get_agreement_keyboard("agb")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç AGB –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        message_start_time = time.time()
        await message.answer(
            "üìù –î–æ–∫—É–º–µ–Ω—Ç 1/3: ALLGEMEINE GESCH√ÑFTSBEDINGUNGEN (AGB)\n\n" + agb_text,
            reply_markup=keyboard
        )
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å AGB –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ {time.time() - message_start_time:.4f} —Å–µ–∫")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logger.debug(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_agb –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        state_start_time = time.time()
        await AgreementStates.waiting_for_agb.set()
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ {time.time() - state_start_time:.4f} —Å–µ–∫")
        
        # –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        logger.info(f"–í–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–Ω—è–ª {time.time() - start_time:.4f} —Å–µ–∫")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è —Å AGB (–ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç)
@dp.callback_query_handler(lambda c: c.data == "agree_agb", state=AgreementStates.waiting_for_agb)
async def process_agb_agreement(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è —Å AGB - —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    user_id = callback_query.from_user.id
    logger.info(f"üëç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –°–û–ì–õ–ê–°–ï–ù —Å AGB")
    start_time = time.time()
    
    try:
        # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏!
        logger.debug("–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
        await callback_query.answer(text="‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", show_alert=False)
        logger.debug(f"–û—Ç–≤–µ—Ç –Ω–∞ callback –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {time.time() - start_time:.4f} —Å–µ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ç–æ—Ä–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
        doc_start_time = time.time()
        logger.debug(f"–ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç Widerruf –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        widerruf_text = await get_document("widerruf")
        logger.debug(f"–î–æ–∫—É–º–µ–Ω—Ç Widerruf –ø–æ–ª—É—á–µ–Ω –∑–∞ {time.time() - doc_start_time:.4f} —Å–µ–∫")
        
        # –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if len(widerruf_text) > 3900:
            widerruf_text = widerruf_text[:3900] + "...\n(–î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–µ–∑–∞–Ω)"
        
        # –ì–æ—Ç–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_time = time.time()
        keyboard = get_agreement_keyboard("widerruf")
        logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è Widerruf —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ {time.time() - keyboard_time:.4f} —Å–µ–∫")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
        send_start_time = time.time()
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º Widerruf –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await callback_query.message.answer(
            "üìù –î–æ–∫—É–º–µ–Ω—Ç 2/3: VERZICHTSERKL√ÑRUNG AUF WIDERRUFSRECHT\n\n" + widerruf_text,
            reply_markup=keyboard
        )
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å Widerruf –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ {time.time() - send_start_time:.4f} —Å–µ–∫")
        
        # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_time = time.time()
        await AgreementStates.waiting_for_widerruf.set()
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ waiting_for_widerruf –∑–∞ {time.time() - state_time:.4f} —Å–µ–∫")
        
        # –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        total_time = time.time() - start_time
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è —Å AGB –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.4f} —Å–µ–∫")
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–≥–ª–∞—Å–∏—è —Å AGB: {e}", exc_info=True)
        error_time = time.time()
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        try:
            await callback_query.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                reply_markup=main_menu
            )
        except Exception as msg_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {msg_error}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–Ω—è–ª–∞ {time.time() - error_time:.4f} —Å–µ–∫")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è —Å Widerruf (–≤—Ç–æ—Ä–æ–π –¥–æ–∫—É–º–µ–Ω—Ç)
@dp.callback_query_handler(lambda c: c.data == "agree_widerruf", state=AgreementStates.waiting_for_widerruf)
async def process_widerruf_agreement(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è —Å Widerruf - —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    user_id = callback_query.from_user.id
    logger.info(f"üëç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –°–û–ì–õ–ê–°–ï–ù —Å Widerruf")
    start_time = time.time()
    
    try:
        # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏!
        logger.debug("–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
        await callback_query.answer(text="‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", show_alert=False)
        logger.debug(f"–û—Ç–≤–µ—Ç –Ω–∞ callback –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {time.time() - start_time:.4f} —Å–µ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ—Ç–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
        doc_start_time = time.time()
        logger.debug(f"–ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç Datenschutz –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        datenschutz_text = await get_document("datenschutz")
        logger.debug(f"–î–æ–∫—É–º–µ–Ω—Ç Datenschutz –ø–æ–ª—É—á–µ–Ω –∑–∞ {time.time() - doc_start_time:.4f} —Å–µ–∫")
        
        # –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if len(datenschutz_text) > 3900:
            datenschutz_text = datenschutz_text[:3900] + "...\n(–î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–µ–∑–∞–Ω)"
        
        # –ì–æ—Ç–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_time = time.time()
        keyboard = get_agreement_keyboard("datenschutz")
        logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è Datenschutz —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ {time.time() - keyboard_time:.4f} —Å–µ–∫")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
        send_start_time = time.time()
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º Datenschutz –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await callback_query.message.answer(
            "üìù –î–æ–∫—É–º–µ–Ω—Ç 3/3: DATENSCHUTZERKL√ÑRUNG\n\n" + datenschutz_text,
            reply_markup=keyboard
        )
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å Datenschutz –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ {time.time() - send_start_time:.4f} —Å–µ–∫")
        
        # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_time = time.time()
        await AgreementStates.waiting_for_datenschutz.set()
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ waiting_for_datenschutz –∑–∞ {time.time() - state_time:.4f} —Å–µ–∫")
        
        # –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        total_time = time.time() - start_time
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è —Å Widerruf –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.4f} —Å–µ–∫")
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–≥–ª–∞—Å–∏—è —Å Widerruf: {e}", exc_info=True)
        error_time = time.time()
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        try:
            await callback_query.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                reply_markup=main_menu
            )
        except Exception as msg_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {msg_error}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–Ω—è–ª–∞ {time.time() - error_time:.4f} —Å–µ–∫")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è —Å Datenschutz (—Ç—Ä–µ—Ç–∏–π –¥–æ–∫—É–º–µ–Ω—Ç)
@dp.callback_query_handler(lambda c: c.data == "agree_datenschutz", state=AgreementStates.waiting_for_datenschutz)
async def process_datenschutz_agreement(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è —Å Datenschutz - —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    user_id = callback_query.from_user.id
    logger.info(f"üëç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –°–û–ì–õ–ê–°–ï–ù —Å Datenschutz")
    start_time = time.time()
    
    try:
        # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏!
        logger.debug("–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
        await callback_query.answer(text="‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", show_alert=False)
        logger.debug(f"–û—Ç–≤–µ—Ç –Ω–∞ callback –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {time.time() - start_time:.4f} —Å–µ–∫")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_time = time.time()
        logger.debug(f"–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await state.finish()
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {time.time() - state_time:.4f} —Å–µ–∫")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
        send_start_time = time.time()
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å (149‚Ç¨)", url=STRIPE_PAYMENT_URL))
        
        await callback_query.message.answer(
            f"üí≥ –û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞ '{COURSE_TITLE}' ‚Äî {COURSE_PRICE_EUR}‚Ç¨\n\n"
            "‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_payment –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", 
            reply_markup=keyboard
        )
        logger.debug(f"–ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞ {time.time() - send_start_time:.4f} —Å–µ–∫")
        
        # –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        total_time = time.time() - start_time
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è —Å Datenschutz –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.4f} —Å–µ–∫")
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–≥–ª–∞—Å–∏—è —Å Datenschutz: {e}", exc_info=True)
        error_time = time.time()
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        try:
            await callback_query.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                reply_markup=main_menu
            )
        except Exception as msg_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {msg_error}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–Ω—è–ª–∞ {time.time() - error_time:.4f} —Å–µ–∫")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ —Å–æ–≥–ª–∞—Å–∏—è
@dp.callback_query_handler(lambda c: c.data == "cancel_agreement", state=[
    AgreementStates.waiting_for_agb,
    AgreementStates.waiting_for_widerruf,
    AgreementStates.waiting_for_datenschutz
])
async def cancel_agreement(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–≥–ª–∞—Å–∏—è - —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    user_id = callback_query.from_user.id
    start_time = time.time()
    
    try:
        current_state = await state.get_state()
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —ç—Ç–∞–ø–µ {current_state}")
        
        # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏!
        logger.debug("–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
        await callback_query.answer(text="‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", show_alert=False)
        logger.debug(f"–û—Ç–≤–µ—Ç –Ω–∞ callback –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {time.time() - start_time:.4f} —Å–µ–∫")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        state_time = time.time()
        await state.finish()
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –∑–∞ {time.time() - state_time:.4f} —Å–µ–∫")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        send_time = time.time()
        await callback_query.message.answer(
            "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã.",
            reply_markup=main_menu
        )
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ {time.time() - send_time:.4f} —Å–µ–∫")
        
        # –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        total_time = time.time() - start_time
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.4f} —Å–µ–∫")
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–º–µ–Ω—ã: {e}", exc_info=True)
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await state.finish()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await callback_query.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                reply_markup=main_menu
            )
        except Exception as msg_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {msg_error}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ FSM: –ø–∏—Ç–∞–Ω–Ω—è ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message_handler(lambda m: m.text.lower() == "‚ùì –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: types.Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    if not openai_client_ready:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=main_menu)
        return
    await QuestionStates.waiting_for_question.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ YouTube-–∫–∞–Ω–∞–ª–∞–º.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ¬´üîô –û—Ç–º–µ–Ω–∞¬ª.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )

@dp.message_handler(state=QuestionStates.waiting_for_question)
async def handle_question(message: types.Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if message.text.lower() == "üîô –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        return
    await message.answer("ü§î –î—É–º–∞—é...")
    reply = await ask_assistant(message.text)
    await message.answer(f"üí° {reply}", reply_markup=main_menu)
    await state.finish()
    
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message_handler(lambda m: m.text.lower() == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—ã" and m.from_user.id == ADMIN_USER_ID)
async def check_all_payments_status(message: types.Message):
    logger.debug(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π")
    # –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
    await message.answer("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å Stripe: https://dashboard.stripe.com/payments")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –æ–ø–ª–∞—Ç—É
@dp.message_handler(commands=["check_payment"])
@dp.message_handler(lambda m: m.text.lower() in ["–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ—é –æ–ø–ª–∞—Ç—É", "‚úÖ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "/check_payment"])
async def check_user_payment_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã")
    
    if not stripe_client_ready:
        await message.answer(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª –∫—É—Ä—Å' –∏ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Ä—É—á–Ω—É—é.",
            reply_markup=main_menu
        )
        return
        
    await message.answer(
        "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–º –Ω—É–∂–µ–Ω email, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç email:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    await PaymentCheckStates.waiting_for_email.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@dp.message_handler(state=PaymentCheckStates.waiting_for_email)
async def check_payment_by_email(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω email –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text}")
    
    if message.text.lower() == "üîô –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
        
    email = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if "@" not in email or "." not in email:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: name@example.com"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è
    await state.update_data(email=email)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    
    await PaymentCheckStates.waiting_for_name.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@dp.message_handler(state=PaymentCheckStates.waiting_for_name)
async def check_payment_by_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text}")
    
    if message.text.lower() == "üîô –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
        
    user_data = await state.get_data()
    email = user_data.get("email")
    name = message.text.strip()
    
    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É –ø–æ email
    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è {email} –∏ {name}")
    email_payment_found = await check_stripe_payment_by_email(email)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –ø–æ email –Ω–µ –Ω–∞—à–ª–∏
    name_payment_found = False
    if not email_payment_found:
        name_payment_found = await check_stripe_payment_by_name(name)
    
    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø
    if email_payment_found or name_payment_found:
        logger.info(f"–ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await send_course_access(message.from_user.id)
        await message.answer(
            "‚úÖ –ú—ã –Ω–∞—à–ª–∏ –≤–∞—à –ø–ª–∞—Ç–µ–∂! –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.",
            reply_markup=main_menu
        )
    else:
        logger.info(f"–ü–ª–∞—Ç–µ–∂ –ù–ï –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω
        await message.answer(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à –ø–ª–∞—Ç–µ–∂.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "1Ô∏è‚É£ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 –º–∏–Ω—É—Ç)\n"
            "2Ô∏è‚É£ –í—ã —É–∫–∞–∑–∞–ª–∏ –¥—Ä—É–≥–æ–π email –∏–ª–∏ –∏–º—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ\n"
            "3Ô∏è‚É£ –û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: '–Ø –æ–ø–ª–∞—Ç–∏–ª –∫—É—Ä—Å'",
            reply_markup=main_menu
        )
    
    await state.finish()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–ø–ª–∞—Ç–µ
@dp.message_handler(lambda m: "–æ–ø–ª–∞—Ç–∏–ª" in m.text.lower() or "–æ–ø–ª–∞—Ç–∏–ª–∞" in m.text.lower())
async def handle_payment_notification(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ
    admin_id = ADMIN_USER_ID
    
    try:
        await bot.send_message(
            chat_id=admin_id,
            text=f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ–ø–ª–∞—Ç–µ!\n\n"
                 f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n"
                 f"üÜî ID: {message.from_user.id}\n\n"
                 f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à –ø–ª–∞—Ç–µ–∂ –∏ –≤—ã–¥–∞–¥–∏–º –¥–æ—Å—Ç—É–ø.\n\n"
            "–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, "
            "–≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –±–æ—Ç–µ.",
            reply_markup=main_menu
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message_handler(commands=["grant"])
@dp.message_handler(lambda m: m.text.lower().startswith("–≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø") and m.from_user.id == ADMIN_USER_ID)
async def grant_access(message: types.Message):
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–¥–∞—á—É –¥–æ—Å—Ç—É–ø–∞: {message.text}")
    # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        if message.text.lower().startswith("–≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø"):
            parts = message.text.split(" ")
            if len(parts) < 3:
                await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '–≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø 123456789'")
                return
            user_id = int(parts[2])
        else:  # –ö–æ–º–∞–Ω–¥–∞ /grant
            parts = message.text.split(" ")
            if len(parts) < 2:
                await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /grant 123456789")
                return
            user_id = int(parts[1])
            
        # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç—É–ø
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞—ë—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await send_course_access(user_id)
        await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def on_startup(dp):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

async def on_shutdown(dp):
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

if __name__ == "__main__":
    from aiogram import executor
    # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º allowed_updates, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å callback_query –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
    executor.start_polling(
        dp, 
        on_startup=on_startup, 
        on_shutdown=on_shutdown, 
        skip_updates=True,
        allowed_updates=["message", "callback_query", "pre_checkout_query", "chat_join_request"]
    )
