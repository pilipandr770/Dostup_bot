# filepath: c:\Users\–ü–ö\dostup_bot\app\bot_v2.py
import asyncio
import logging
import os
import time
from pathlib import Path

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           KeyboardButton, ReplyKeyboardMarkup)
from dotenv import load_dotenv
import openai
# –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ API –Ω–∞–º –Ω—É–∂–µ–Ω –º–æ–¥—É–ª—å stripe
import stripe
# from aiohttp import web  # –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –Ω–µ –Ω—É–∂–Ω–æ

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ ENV & LOGGING ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ CONFIG ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN           = os.getenv('BOT_TOKEN')
PROVIDER_TOKEN      = os.getenv('PROVIDER_TOKEN')
COURSE_CHANNEL_ID   = os.getenv('COURSE_CHANNEL_ID')
YOUTUBE_CHANNEL_URL = os.getenv('YOUTUBE_CHANNEL_URL')
CHANNEL_INVITE_LINK = os.getenv('CHANNEL_INVITE_LINK')
OPENAI_API_KEY      = os.getenv('OPENAI_API_KEY')
OPENAI_ASSISTANT_ID = os.getenv('OPENAI_ASSISTANT_ID')
# –î–ª—è –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ URL –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
STRIPE_PAYMENT_URL  = os.getenv('STRIPE_PAYMENT_URL', 'https://buy.stripe.com/9B6fZg4TTcbwc6V7gT3Nm00')
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '403758011'))

# –®–ª—è—Ö –¥–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ –≤—ñ–¥–µ–æ-—É—Ä–æ–∫—É (–ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª)
LESSON_VIDEO_PATH = Path(r"C:\Users\–ü–ö\dostup_bot\lessons\–Æ–¢–£–ë —É—Ä–æ–∫ 0.mp4")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—é—á—ñ–≤
if not BOT_TOKEN or BOT_TOKEN == 'YOUR_REAL_BOT_TOKEN_HERE':
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!")
    raise SystemExit(1)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ OpenAI ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
openai_client_ready = False
if OPENAI_API_KEY and OPENAI_API_KEY != 'your_openai_api_key_here':
    openai.api_key = OPENAI_API_KEY
    openai_client_ready = True
    logger.info("OpenAI API —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
else:
    logger.warning("OpenAI API-–∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî —Ñ—É–Ω–∫—Ü—ñ—ó Assistant –≤–∏–º–∫–Ω–µ–Ω—ñ")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ Stripe ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API Stripe –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
stripe_client_ready = False
# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
STRIPE_API_KEY = os.getenv('STRIPE_API_KEY')
if STRIPE_API_KEY and STRIPE_API_KEY != 'your_stripe_api_key_here':
    stripe.api_key = STRIPE_API_KEY
    stripe_client_ready = True
    logger.info("Stripe API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
else:
    logger.warning("STRIPE_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ Aiogram ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
bot     = Bot(BOT_TOKEN)
storage = MemoryStorage()
dp      = Dispatcher(bot, storage=storage)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ FSM ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class QuestionStates(StatesGroup):
    waiting_for_question = State()
    
class PaymentCheckStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_name = State()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ DATA ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
COURSE_PRICES = {
    "basic":   {
        "price": 299_000, "title": "–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å", "description": "–û—Å–Ω–æ–≤—ã YouTube-–±–∏–∑–Ω–µ—Å–∞",
        "price_eur": 149, "stripe_price_id": "—Å–æ–∑–¥–∞–π—Ç–µ ID —Ü–µ–Ω—ã –≤ –ø–∞–Ω–µ–ª–∏ Stripe –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞"
    },
    "premium": {
        "price": 599_000, "title": "–ü—Ä–µ–º–∏—É–º –∫—É—Ä—Å", "description": "–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
        "price_eur": 299, "stripe_price_id": "—Å–æ–∑–¥–∞–π—Ç–µ ID —Ü–µ–Ω—ã –≤ –ø–∞–Ω–µ–ª–∏ Stripe –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞"
    },
    "vip":     {
        "price": 999_000, "title": "VIP –∫—É—Ä—Å", "description": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ",
        "price_eur": 499, "stripe_price_id": "—Å–æ–∑–¥–∞–π—Ç–µ ID —Ü–µ–Ω—ã –≤ –ø–∞–Ω–µ–ª–∏ Stripe –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞"
    }
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ KEYBOARDS ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
main_menu = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üé¨ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫")],
        [KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 149‚Ç¨")],
        [KeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É")],
        [KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]
    ],
    resize_keyboard=True
)

buy_menu = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üíé –ë–∞–∑–æ–≤—ã–π - 2990‚ÇΩ")],
        [KeyboardButton("üöÄ –ü—Ä–µ–º–∏—É–º - 5990‚ÇΩ")],
        [KeyboardButton("üëë VIP - 9990‚ÇΩ")],
        [KeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ OpenAI helper ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI Assistant API —Ç—Ä–µ–±—É–µ—Ç—Å—è openai>=1.3.0
# –í requirements.txt –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: openai>=1.3.0
# –í .env –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å OPENAI_ASSISTANT_ID=asst_...
# –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ OpenAI Assistants API
async def ask_assistant(question: str) -> str:
    if not openai_client_ready:
        return "‚ùå OpenAI Assistant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI Assistants API (asst_...)
        thread = openai.beta.threads.create()
        openai.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=question
        )
        run = openai.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=OPENAI_ASSISTANT_ID
        )
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run
        import time
        while True:
            run_status = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
            if run_status.status == "completed":
                break
            elif run_status.status in ("failed", "cancelled", "expired"):
                return "‚ùå –û—à–∏–±–∫–∞ OpenAI Assistant. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            time.sleep(1)
        messages = openai.beta.threads.messages.list(thread_id=thread.id)
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        for msg in reversed(messages.data):
            if msg.role == "assistant":
                return msg.content[0].text.value
        return "‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."
    except Exception as e:
        logger.error(f"OpenAI Assistant error: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ OpenAI Assistant, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ Stripe helper ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def create_stripe_checkout(tariff: str, user_id: int) -> str:
    """–°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–µ—Å—Å–∏—é –≤ Stripe –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    if not stripe_client_ready:
        return None
    
    try:
        price_cfg = COURSE_PRICES[tariff]
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        success_url = os.getenv('STRIPE_SUCCESS_URL', 'https://t.me/your_bot_username')
        cancel_url = os.getenv('STRIPE_CANCEL_URL', 'https://t.me/your_bot_username')
        
        # –°–æ–∑–¥–∞—ë–º —á–µ–∫–∞—É—Ç —Å–µ—Å—Å–∏—é
        checkout_session = stripe.checkout.Session.create(
            payment_method_types=['card'],
            line_items=[{
                'price': price_cfg["stripe_price_id"],  # ID –ø—Ä–æ–¥—É–∫—Ç–∞/—Ü–µ–Ω—ã –≤ Stripe
                'quantity': 1,
            }],
            mode='payment',
            success_url=f'{success_url}?session_id={{CHECKOUT_SESSION_ID}}&user_id={user_id}&tariff={tariff}',
            cancel_url=cancel_url,
            client_reference_id=str(user_id),  # –î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Telegram
            metadata={
                'user_id': str(user_id),
                'tariff': tariff,
            },
        )
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ Stripe —Å–µ—Å—Å–∏—è: {checkout_session.id}")
        return checkout_session.url
    except Exception as e:
        logger.error(f"Stripe error: {e}")
        return None

async def check_stripe_payment_by_email(email: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ email –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    if not stripe_client_ready:
        return False
    
    try:
        # –ò—â–µ–º –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π (–º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π)
        thirty_days_ago = int(time.time() - 30 * 24 * 60 * 60)
        payment_intents = stripe.PaymentIntent.list(
            limit=100,
            created={"gte": thirty_days_ago}
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
        for payment in payment_intents.data:
            if payment.status == 'succeeded':
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
                if hasattr(payment, 'customer') and payment.customer:
                    try:
                        customer = stripe.Customer.retrieve(payment.customer)
                        if customer.email and customer.email.lower() == email.lower():
                            logger.info(f"–ù–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è {email}: {payment.id}")
                            return True
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–µ: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
                if hasattr(payment, 'metadata') and payment.metadata:
                    payment_email = payment.metadata.get('email')
                    if payment_email and payment_email.lower() == email.lower():
                        logger.info(f"–ù–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è {email} –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {payment.id}")
                        return True
                        
        logger.info(f"–ü–ª–∞—Ç–µ–∂–∏ –¥–ª—è {email} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False

async def check_stripe_payment_by_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–Ω–µ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫)"""
    if not stripe_client_ready:
        return False
    
    try:
        # –ò—â–µ–º –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = int(time.time() - 30 * 24 * 60 * 60)
        payment_intents = stripe.PaymentIntent.list(
            limit=100,
            created={"gte": thirty_days_ago}
        )
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
        normalized_name = name.lower().replace(' ', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
        for payment in payment_intents.data:
            if payment.status == 'succeeded':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
                if hasattr(payment, 'customer') and payment.customer:
                    try:
                        customer = stripe.Customer.retrieve(payment.customer)
                        if customer.name:
                            customer_name = customer.name.lower().replace(' ', '')
                            if normalized_name in customer_name or customer_name in normalized_name:
                                logger.info(f"–ù–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è {name}: {payment.id}")
                                return True
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–µ: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
                if hasattr(payment, 'metadata') and payment.metadata:
                    customer_name = payment.metadata.get('name')
                    if customer_name:
                        customer_name = customer_name.lower().replace(' ', '')
                        if normalized_name in customer_name or customer_name in normalized_name:
                            logger.info(f"–ù–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è {name} –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {payment.id}")
                            return True
                
        logger.info(f"–ü–ª–∞—Ç–µ–∂–∏ –¥–ª—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ HANDLERS ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message_handler(commands=["start"])
@dp.message_handler(lambda m: m.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def cmd_start(message: types.Message, state: FSMContext):
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫—É—Ä—Å–∞ '–£—Å–ø–µ—à–Ω—ã–π YouTube-–±–∏–∑–Ω–µ—Å —Å –Ω—É–ª—è'!\n\n"
        "üé¨ –ü–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.\n\n"
        "üí≥ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram-—Å–æ–æ–±—â–µ—Å—Ç–≤—É, –æ–ø–ª–∞—Ç–∏ —É—á–∞—Å—Ç–∏–µ (149‚Ç¨) ‚Äî –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—à—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞.\n\n"
        "‚ùì –í –ª—é–±–æ–µ –≤—Ä–µ–º—è –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ YouTube ‚Äî —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n\n"
        "–£–¥–∞—á–∏ –∏ –±–æ–ª—å—à–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ YouTube!"
    )
    await message.answer(text, reply_markup=main_menu)
    await state.finish()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —É—Ä–æ–∫ ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message_handler(lambda m: m.text.lower() == "üé¨ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫")
async def send_free_lesson(message: types.Message):
    await message.answer(
        f"üé¨ –í–æ—Ç —Ç–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–∫!\n\n–°–º–æ—Ç—Ä–∏ –Ω–∞ YouTube: {YOUTUBE_CHANNEL_URL}",
        reply_markup=main_menu
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫—É—Ä—Å ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message_handler(lambda m: m.text.lower() == "‚ÑπÔ∏è –æ –∫—É—Ä—Å–µ")
async def course_info(message: types.Message):
    text = (
        "üìö –ö—É—Ä—Å ¬´–£—Å–ø–µ—à–Ω—ã–π YouTube-–±–∏–∑–Ω–µ—Å —Å –Ω—É–ª—è¬ª\n\n"
        "‚úîÔ∏è –ü–æ—à–∞–≥–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∫–∞–Ω–∞–ª–∞\n"
        "‚úîÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏\n"
        "‚úîÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤\n\n"
        "üí∞ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã."
    )
    await message.answer(text, reply_markup=main_menu, parse_mode="Markdown")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message_handler(lambda m: m.text.lower() == "üí≥ –æ–ø–ª–∞—Ç–∏—Ç—å 149‚Ç¨")
async def payment_menu(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã Stripe
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π", url=STRIPE_PAYMENT_URL))
    
    # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Telegram –ø–ª–∞—Ç–µ–∂, –¥–æ–±–∞–≤–ª—è–µ–º –∏ —ç—Ç—É –æ–ø—Ü–∏—é
    if PROVIDER_TOKEN:
        keyboard.add(InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram", callback_data="telegram_pay_basic"))
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n\n"
        "1Ô∏è‚É£ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π - –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ\n"
        "2Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /check_payment\n"
        "3Ô∏è‚É£ –ú—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à—É –æ–ø–ª–∞—Ç—É –∏ –≤—ã–¥–∞–¥–∏–º –¥–æ—Å—Ç—É–ø\n\n"
        "‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º '–Ø –æ–ø–ª–∞—Ç–∏–ª –∫—É—Ä—Å'", 
        reply_markup=keyboard
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message_handler(lambda m: m.text in ["üíé –ë–∞–∑–æ–≤—ã–π - 2990‚ÇΩ", "üöÄ –ü—Ä–µ–º–∏—É–º - 5990‚ÇΩ", "üëë VIP - 9990‚ÇΩ"])
async def create_invoice(message: types.Message):
    tariff_key = ("basic"   if "–ë–∞–∑–æ–≤—ã–π" in message.text else
                  "premium" if "–ü—Ä–µ–º–∏—É–º" in message.text else
                  "vip")
    price_cfg = COURSE_PRICES[tariff_key]

    prices = [types.LabeledPrice(label=price_cfg["title"], amount=price_cfg["price"])]
    try:
        await bot.send_invoice(
            chat_id=message.chat.id,
            title=price_cfg["title"],
            description=price_cfg["description"],
            payload=f"course_{tariff_key}",
            provider_token=PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="yt-course"
        )
    except Exception as e:
        logger.error(f"Invoice error: {e}")
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫.", reply_markup=main_menu)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ FSM: –ø–∏—Ç–∞–Ω–Ω—è ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message_handler(lambda m: m.text.lower() == "‚ùì –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: types.Message, state: FSMContext):
    if not openai_client_ready:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=main_menu)
        return
    await QuestionStates.waiting_for_question.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ YouTube-–∫–∞–Ω–∞–ª–∞–º.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ¬´üîô –û—Ç–º–µ–Ω–∞¬ª.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )

@dp.message_handler(state=QuestionStates.waiting_for_question)
async def handle_question(message: types.Message, state: FSMContext):
    if message.text.lower() == "üîô –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        return
    await message.answer("ü§î –î—É–º–∞—é...")
    reply = await ask_assistant(message.text)
    await message.answer(f"üí° {reply}", reply_markup=main_menu)
    await state.finish()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –û–ø–ª–∞—Ç–∞ ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.pre_checkout_query_handler()
async def pre_checkout(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    tariff = message.successful_payment.invoice_payload.replace("course_", "")
    await message.answer(
        f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É —Ç–∞—Ä–∏—Ñ—É **{COURSE_PRICES[tariff]['title']}**!\n"
        "–î–æ—Å—Ç—É–ø–∏ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω.",
        parse_mode="Markdown",
        reply_markup=main_menu
    )
    
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message_handler(lambda m: m.text.lower() == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—ã" and m.from_user.id == ADMIN_USER_ID)
async def check_all_payments_status(message: types.Message):
    # –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
    await message.answer("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å Stripe: https://dashboard.stripe.com/payments")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –æ–ø–ª–∞—Ç—É
@dp.message_handler(commands=["check_payment"])
@dp.message_handler(lambda m: m.text.lower() in ["–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ—é –æ–ø–ª–∞—Ç—É", "/check_payment"])
async def check_user_payment_start(message: types.Message, state: FSMContext):
    if not stripe_client_ready:
        await message.answer(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª –∫—É—Ä—Å' –∏ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Ä—É—á–Ω—É—é.",
            reply_markup=main_menu
        )
        return
        
    await message.answer(
        "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–º –Ω—É–∂–µ–Ω email, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç email:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    await PaymentCheckStates.waiting_for_email.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@dp.message_handler(state=PaymentCheckStates.waiting_for_email)
async def check_payment_by_email(message: types.Message, state: FSMContext):
    if message.text.lower() == "üîô –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
        
    email = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if "@" not in email or "." not in email:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: name@example.com"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è
    await state.update_data(email=email)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    
    await PaymentCheckStates.waiting_for_name.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@dp.message_handler(state=PaymentCheckStates.waiting_for_name)
async def check_payment_by_name(message: types.Message, state: FSMContext):
    if message.text.lower() == "üîô –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
        
    user_data = await state.get_data()
    email = user_data.get("email")
    name = message.text.strip()
    
    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É –ø–æ email
    email_payment_found = await check_stripe_payment_by_email(email)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –ø–æ email –Ω–µ –Ω–∞—à–ª–∏
    name_payment_found = False
    if not email_payment_found:
        name_payment_found = await check_stripe_payment_by_name(name)
    
    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø
    if email_payment_found or name_payment_found:
        await send_course_access(message.from_user.id)
        await message.answer(
            "‚úÖ –ú—ã –Ω–∞—à–ª–∏ –≤–∞—à –ø–ª–∞—Ç–µ–∂! –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.",
            reply_markup=main_menu
        )
    else:
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω
        await message.answer(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à –ø–ª–∞—Ç–µ–∂.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "1Ô∏è‚É£ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 –º–∏–Ω—É—Ç)\n"
            "2Ô∏è‚É£ –í—ã —É–∫–∞–∑–∞–ª–∏ –¥—Ä—É–≥–æ–π email –∏–ª–∏ –∏–º—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ\n"
            "3Ô∏è‚É£ –û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: '–Ø –æ–ø–ª–∞—Ç–∏–ª –∫—É—Ä—Å'",
            reply_markup=main_menu
        )
    
    await state.finish()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–ø–ª–∞—Ç–µ
@dp.message_handler(lambda m: "–æ–ø–ª–∞—Ç–∏–ª" in m.text.lower() or "–æ–ø–ª–∞—Ç–∏–ª–∞" in m.text.lower())
async def handle_payment_notification(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ
    admin_id = ADMIN_USER_ID
    
    try:
        await bot.send_message(
            chat_id=admin_id,
            text=f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ–ø–ª–∞—Ç–µ!\n\n"
                 f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n"
                 f"üÜî ID: {message.from_user.id}\n\n"
                 f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ!\n\n"
            "–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫—É—Ä—Å–∞. "
            "–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç.",
            reply_markup=main_menu
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É support@example.com")
        
# –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞ –≤—Ä—É—á–Ω—É—é
@dp.message_handler(lambda m: m.text.startswith("/grant_access") and m.from_user.id == ADMIN_USER_ID)
async def grant_access(message: types.Message):
    try:
        # –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /grant_access USER_ID
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_access USER_ID")
            return
            
        user_id = int(parts[1])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –Ω–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        success = await send_course_access(user_id)
        
        # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± —É—Å–ø–µ—à–Ω–æ–π –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞
        await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.callback_query_handler(lambda c: c.data.startswith("telegram_pay_"))
async def process_telegram_payment(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    tariff = callback_query.data.replace("telegram_pay_", "")
    
    if not PROVIDER_TOKEN:
        await callback_query.message.answer(
            "‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", 
            reply_markup=main_menu
        )
        return
    
    price_cfg = COURSE_PRICES[tariff]
    prices = [types.LabeledPrice(label=price_cfg["title"], amount=price_cfg["price"])]
    
    try:
        await bot.send_invoice(
            chat_id=callback_query.message.chat.id,
            title=price_cfg["title"],
            description=price_cfg["description"],
            payload=f"course_{tariff}",
            provider_token=PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="yt-course"
        )
    except Exception as e:
        logger.error(f"Invoice error: {e}")
        await callback_query.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç.", 
            reply_markup=main_menu
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ FALLBACK: —á–∞—Ç ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message_handler(lambda m: m.text.lower() == "‚úÖ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É")
async def check_payment_button(message: types.Message, state: FSMContext):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
    await check_user_payment_start(message, state)

@dp.message_handler(content_types=types.ContentType.TEXT)
async def ai_fallback(message: types.Message, state: FSMContext):
    if await state.get_state() is not None:
        return
    menu_cmds = {"üé¨ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫", "üí≥ –æ–ø–ª–∞—Ç–∏—Ç—å 149‚Ç¨", "‚ÑπÔ∏è –æ –∫—É—Ä—Å–µ", "‚ùì –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "‚úÖ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "/start", "—Å—Ç–∞—Ä—Ç"}
    if message.text.lower() in menu_cmds:
        return
    if not openai_client_ready:
        await message.answer("üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=main_menu)
        return
    await message.answer("ü§î –î—É–º–∞—é...")
    rsp = await ask_assistant(message.text)
    await message.answer(f"üí° {rsp}", reply_markup=main_menu)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞ ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü–æ–ª–µ–∑–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ —Ä—É—á–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
async def send_course_access(user_id: int, tariff: str = "basic"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –∏–∑ .env
        invite_link = CHANNEL_INVITE_LINK if CHANNEL_INVITE_LINK else "https://t.me/+xazMLl_YLUllMzUy"
        
        await bot.send_message(
            chat_id=user_id,
            text=(
                f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
                f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª: {invite_link}\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ! üéâ"
            ),
            reply_markup=main_menu
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è - –±–µ–∑ webhook-—Å–µ—Ä–≤–µ—Ä–∞ ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Webhook-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
# –í –±—É–¥—É—â–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
    
    # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    runner = web.AppRunner(app)
    return runner

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ MAIN ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main():
    logger.info("Bot starting‚Ä¶")
    
    # –í —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ Stripe –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook-—Å–µ—Ä–≤–µ—Ä
    webhook_runner = None
    # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –±–µ–∑ API
    # if 'STRIPE_API_KEY' in os.environ and 'STRIPE_WEBHOOK_SECRET' in os.environ:
    #     webhook_runner = setup_webhook_server(dp)
    #     await webhook_runner.setup()
    #     site = web.TCPSite(webhook_runner, 'localhost', 8080)
    #     await site.start()
    #     logger.info("Webhook server started on http://localhost:8080")
    
    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling()
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if webhook_runner:
            await webhook_runner.cleanup()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
