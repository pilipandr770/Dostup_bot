import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot token and other variables
BOT_TOKEN = os.getenv('BOT_TOKEN')
PROVIDER_TOKEN = os.getenv('PROVIDER_TOKEN')
COURSE_CHANNEL_ID = os.getenv('COURSE_CHANNEL_ID')
YOUTUBE_CHANNEL_URL = os.getenv('YOUTUBE_CHANNEL_URL', 'https://youtube.com/@your-channel-name')

# Check if BOT_TOKEN is provided
if not BOT_TOKEN or BOT_TOKEN == 'YOUR_REAL_BOT_TOKEN_HERE':
    logger.error("BOT_TOKEN is not set or using placeholder. Please get a real token from @BotFather")
    exit(1)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# FSM States
class ConsentStates(StatesGroup):
    agb = State()
    widerruf = State()
    datenschutz = State()
    payment_form = State()
    ready = State()

# Main menu keyboard
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üé¨ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫")],
        [KeyboardButton(text="üéì –ü—Ä–æ–π—Ç–∏ –∫—É—Ä—Å")]
    ],
    resize_keyboard=True
)

# Payment keyboard
payment_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 99‚Ç¨", callback_data="pay_course")]
    ]
)

# Consent keyboard
consent_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω")],
        [KeyboardButton(text="‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω")]
    ],
    resize_keyboard=True
)

# Test payment form keyboard
test_payment_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ò–º—è: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")],
        [KeyboardButton(text="Email: test@example.com")],
        [KeyboardButton(text="–¢–µ–ª–µ—Ñ–æ–Ω: +49123456789")],
        [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –æ–ø–ª–∞—Ç—É")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
@dp.message(F.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def send_welcome(message: types.Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} started bot (/start)")
    welcome_text = """üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫—É—Ä—Å–∞ ¬´–£—Å–ø–µ—à–Ω—ã–π YouTube-–±–∏–∑–Ω–µ—Å —Å –Ω—É–ª—è¬ª!

–¢—ã –∑–¥–µ—Å—å –Ω–µ —Å–ª—É—á–∞–π–Ω–æ ‚Äî –∑–Ω–∞—á–∏—Ç, —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å YouTube-–∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –¥–æ—Ö–æ–¥. –ú—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.

üìö –ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:
‚úÖ –ü–æ—à–∞–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç –∑–∞–ø—É—Å–∫–∞ –¥–æ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç
‚úÖ –ë–µ–∑ –≤–æ–¥—ã ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏–∫–∞

‚∏ª

üéÅ –ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –ø–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–∫!
üëÄ –£–∑–Ω–∞–µ—à—å, –∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã —Å–µ–≥–æ–¥–Ω—è —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –∏ –∫–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫.

üëâ –ù–∞–∂–º–∏ ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫¬ª"""
    
    await message.answer(welcome_text, reply_markup=main_menu)
    await state.clear()

@dp.message(F.text.lower() == "üé¨ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫")
async def send_test_lesson(message: types.Message):
    logger.info(f"User {message.from_user.id} requested test lesson")
    try:        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∫–∞–Ω–∞–ª –≤–º–µ—Å—Ç–æ –≤–∏–¥–µ–æ
        youtube_message = f"""üé¨ –í–æ—Ç —Ç–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–∫!

üìå –í —ç—Ç–æ–º —É—Ä–æ–∫–µ —Ç—ã —É–∑–Ω–∞–µ—à—å:
‚Ä¢ –ö–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç
‚Ä¢ –° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–∏—á–∫—É
‚Ä¢ –ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫

üé• –°–º–æ—Ç—Ä–∏ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –Ω–∞ –Ω–∞—à–µ–º YouTube –∫–∞–Ω–∞–ª–µ:
üëâ {YOUTUBE_CHANNEL_URL}

üî• –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π –ø–µ—Ä–≤—ã–µ –∑–Ω–∞–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"""
        
        await message.answer(youtube_message)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
        after_link_text = """üí¨ –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫? –≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ üòâ

üì¶ –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–∞–µ—Ç:
üìå –ê–Ω–∞–ª–∏–∑ –Ω–∏—à –∏ –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏
üìå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ–∑ –¥–æ—Ä–æ–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
üìå –ê–ª–≥–æ—Ä–∏—Ç–º—ã YouTube –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
üìå –°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
üìå –†–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã + –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —á–∞—Ç–µ

‚∏ª

üî• –•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –≤–µ—Å—å –ø—É—Ç—å –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª?
–¢–æ–≥–¥–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ø–æ–ª–Ω–æ–º—É –∫—É—Ä—Å—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üëá

üëâ –ù–∞–∂–º–∏ ¬´üéì –ü—Ä–æ–π—Ç–∏ –∫—É—Ä—Å¬ª"""
        
        await message.answer(after_link_text, reply_markup=main_menu)
    except Exception as e:
        logger.error(f"Error sending test lesson: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

@dp.message(F.text.lower() == "üéì –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å")
async def start_consent(message: types.Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} started consent process")
    course_info_text = """üéì –ö—É—Ä—Å ¬´–£—Å–ø–µ—à–Ω—ã–π YouTube-–±–∏–∑–Ω–µ—Å —Å –Ω—É–ª—è¬ª

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 99‚Ç¨
üïí –î–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞ + –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
üìö –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ + –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤

‚∏ª

–ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:

üìã –î–û–ö–£–ú–ï–ù–¢ 1: Allgemeine Gesch√§ftsbedingungen (AGB)
f√ºr den Online-Verkauf digitaler Inhalte (Online-Kurse)

1. Geltungsbereich
Diese Allgemeinen Gesch√§ftsbedingungen (AGB) gelten f√ºr alle Vertr√§ge zwischen Firma Alexander Cherkasky Schlitzer Strasse 6, 60386 Frankfurt am Main (nachfolgend ‚ÄûAnbieter") und dem Kunden √ºber den Erwerb und die Nutzung digitaler Inhalte, insbesondere Online-Kurse √ºber die Plattform YouTube oder andere digitale Plattformen.

2. Vertragsgegenstand
Vertragsgegenstand ist der Zugang zu einem Online-Kurs, der aus vorab aufgezeichneten Videolektionen besteht. Der Zugang erfolgt digital und ausschlie√ülich zur pers√∂nlichen Nutzung des Kunden.

3. Vertragsabschluss
Der Vertrag kommt zustande, sobald der Kunde den Bestellvorgang abgeschlossen und der Anbieter die Bestellung best√§tigt hat.

4. Preise und Zahlung
Alle angegebenen Preise verstehen sich als Endpreise in Euro. Die Zahlung erfolgt √ºber die im Bestellprozess angebotenen Zahlungsmethoden. Der Zugang zum Kurs wird nach erfolgreichem Zahlungseingang freigeschaltet.

5. Widerrufsrecht
Bei digitalen Inhalten besteht kein Widerrufsrecht, sobald die Ausf√ºhrung begonnen hat und der Kunde ausdr√ºcklich zugestimmt hat.

6. Haftung
Die Haftung des Anbieters ist auf Vorsatz und grobe Fahrl√§ssigkeit beschr√§nkt.

7. Anwendbares Recht
Es gilt deutsches Recht."""
    await message.answer(course_info_text, reply_markup=consent_keyboard)
    await state.set_state(ConsentStates.agb)

@dp.message(ConsentStates.agb)
async def handle_agb_consent(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω":
        logger.info(f"User {message.from_user.id} agreed to AGB")
        doc_text = """üìã –î–û–ö–£–ú–ï–ù–¢ 2: Widerrufsverzicht

Ich stimme ausdr√ºcklich zu, dass der Anbieter mit der Ausf√ºhrung des Vertrages vor Ablauf der Widerrufsfrist beginnt.

Mir ist bekannt, dass ich bei vollst√§ndiger Vertragserf√ºllung durch den Anbieter mein Widerrufsrecht verliere, wenn der Vertrag auf meinen ausdr√ºcklichen Wunsch erf√ºllt wurde, bevor die Widerrufsfrist abgelaufen ist.

Bei digitalen Inhalten, deren Bereitstellung nicht auf einem k√∂rperlichen Datentr√§ger erfolgt, verliere ich mein Widerrufsrecht, sobald der Anbieter mit der Ausf√ºhrung begonnen hat, nachdem ich ausdr√ºcklich zugestimmt habe und best√§tigt habe, dass ich mein Widerrufsrecht bei Beginn der Ausf√ºhrung verliere.

Ich best√§tige hiermit meinen ausdr√ºcklichen Verzicht auf das Widerrufsrecht."""
        await message.answer(doc_text, reply_markup=consent_keyboard)
        await state.set_state(ConsentStates.widerruf)
    else:
        await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏.", reply_markup=main_menu)
        await state.clear()

@dp.message(ConsentStates.widerruf)
async def handle_widerruf_consent(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω":
        logger.info(f"User {message.from_user.id} agreed to Widerrufsverzicht")
        doc_text = """üìã –î–û–ö–£–ú–ï–ù–¢ 3: Datenschutzerkl√§rung

1. Datenerhebung und -verarbeitung
Wir erheben und verarbeiten personenbezogene Daten nur im Rahmen der gesetzlichen Bestimmungen der DSGVO.

2. Zweck der Datenverarbeitung
Ihre Daten werden ausschlie√ülich zur Abwicklung des Kaufvertrages und zur Bereitstellung des erworbenen Online-Kurses verwendet.

3. Datenweitergabe
Eine Weitergabe Ihrer Daten an Dritte erfolgt nur, soweit dies zur Vertragsabwicklung erforderlich ist (z.B. Zahlungsabwicklung).

4. Ihre Rechte
Sie haben das Recht auf Auskunft, Berichtigung, L√∂schung und Einschr√§nkung der Verarbeitung Ihrer Daten.

5. Kontakt
F√ºr Fragen zum Datenschutz kontaktieren Sie uns unter: [Kontaktdaten]

Mit der Zustimmung erkl√§ren Sie sich mit der Verarbeitung Ihrer Daten gem√§√ü dieser Datenschutzerkl√§rung einverstanden."""
        await message.answer(doc_text, reply_markup=consent_keyboard)
        await state.set_state(ConsentStates.datenschutz)
    else:
        await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏.", reply_markup=main_menu)
        await state.clear()

@dp.message(ConsentStates.datenschutz)
async def handle_datenschutz_consent(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω":
        logger.info(f"User {message.from_user.id} completed all consents")
        await message.answer(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—É—á–µ–Ω—ã.\n\n"
            "üí≥ –¢–ï–°–¢–û–í–ê–Ø –û–ü–õ–ê–¢–ê\n"
            "üí∞ –ö—É—Ä—Å ¬´YouTube-–±–∏–∑–Ω–µ—Å —Å –Ω—É–ª—è¬ª: 99‚Ç¨\n\n"
            "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=test_payment_keyboard
        )
        await state.set_state(ConsentStates.payment_form)
    else:
        await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏.", reply_markup=main_menu)
        await state.clear()

@dp.message(ConsentStates.payment_form)
async def handle_test_payment(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –æ–ø–ª–∞—Ç—É":
        logger.info(f"User {message.from_user.id} completed test payment")
          # Create invite link for the channel
        try:
            invite_link = await bot.create_chat_invite_link(
                chat_id=COURSE_CHANNEL_ID,
                expire_date=None,
                member_limit=1
            )
            
            await message.answer(
                f"üéâ –¢–ï–°–¢–û–í–ê–Ø –û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û!\n\n"
                f"üí∞ –°—É–º–º–∞: 99.00 EUR\n"
                f"üéì –ö—É—Ä—Å: ¬´YouTube-–±–∏–∑–Ω–µ—Å —Å –Ω—É–ª—è¬ª\n"
                f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É: {invite_link.invite_link}\n\n"
                f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!\n"
                f"üìö –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–π —É—Å–ø–µ—à–Ω—ã–π –∫–∞–Ω–∞–ª!\n\n"
                f"‚ö†Ô∏è –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–ª–∞—Ç–µ–∂.",
                reply_markup=main_menu
            )
            await state.clear()
        except Exception as e:
            logger.error(f"Error creating invite link: {e}")
            await message.answer(
                f"üéâ –¢–ï–°–¢–û–í–ê–Ø –û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û!\n\n"
                f"üí∞ –°—É–º–º–∞: 99.00 EUR\n"
                f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n"
                f"üìö –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–ª–∞—Ç–µ–∂.",
                reply_markup=main_menu
            )
            await state.clear()
    else:
        # User is filling in payment form data
        await message.answer("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –æ–ø–ª–∞—Ç—É'", reply_markup=test_payment_keyboard)

@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    logger.info(f"Pre-checkout query from user {pre_checkout_query.from_user.id}")
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(F.content_type == types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    logger.info(f"Successful payment from user {message.from_user.id}")
    payment_info = message.successful_payment
    
    # Create invite link for the channel
    try:
        invite_link = await bot.create_chat_invite_link(
            chat_id=COURSE_CHANNEL_ID,
            expire_date=None,
            member_limit=1
        )
        
        await message.answer(
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üí∞ –°—É–º–º–∞: {payment_info.total_amount // 100} {payment_info.currency}\n"
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É: {invite_link.invite_link}\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫—É—Ä—Å!",
            reply_markup=main_menu
        )
    except Exception as e:
        logger.error(f"Error creating invite link: {e}")
        await message.answer(
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üí∞ –°—É–º–º–∞: {payment_info.total_amount // 100} {payment_info.currency}\n"
            f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=main_menu
        )

# Fallback handler for unknown messages
@dp.message()
async def handle_unknown(message: types.Message):
    logger.info(f"Unknown message from user {message.from_user.id}: {message.text}")
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:", reply_markup=main_menu)

async def main():
    logger.info("Bot is starting...")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())
