#!/usr/bin/env python3
# debug_cloud_run.py - –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è dostup-bot –≤ Google Cloud Run

import os
import sys
import logging
import traceback
import platform
import json
import asyncio
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("dostup_bot_diagnostic")

def print_separator(title=""):
    width = 80
    if title:
        side_width = (width - len(title) - 2) // 2
        logger.info("=" * side_width + f" {title} " + "=" * side_width)
    else:
        logger.info("=" * width)

def diagnose_system():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print_separator("–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
    
    logger.info(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    logger.info(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.platform()}")
    logger.info(f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä: {sys.executable}")
    logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    
    try:
        for item in os.listdir('.'):
            if os.path.isdir(item):
                logger.info(f" - üìÅ {item}/")
            else:
                logger.info(f" - üìÑ {item}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
    
    logger.info(f"–ü—É—Ç—å Python (sys.path):")
    for idx, path in enumerate(sys.path, 1):
        logger.info(f" {idx}. {path}")

def diagnose_env_variables():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print_separator("–ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø")
    
    # –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    critical_vars = ['BOT_TOKEN', 'ADMIN_USER_ID', 'COURSE_CHANNEL_ID']
    
    for var in critical_vars:
        value = os.environ.get(var)
        if value:
            # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥–ª–∏–Ω—É –∏ –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü
            if var == 'BOT_TOKEN':
                length = len(value)
                if length > 8:
                    masked = f"{value[:4]}{'*' * (length - 8)}{value[-4:]}"
                else:
                    masked = "********"
                logger.info(f"{var}: {masked} (–¥–ª–∏–Ω–∞: {length})")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
                if ':' in value and length > 30:
                    logger.info(f"‚úÖ –§–æ—Ä–º–∞—Ç BOT_TOKEN –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º")
                else:
                    logger.warning(f"‚ö†Ô∏è –§–æ—Ä–º–∞—Ç BOT_TOKEN –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞:—Å—Ç—Ä–æ–∫–∏")
            else:
                logger.info(f"{var}: {value}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                if var == 'ADMIN_USER_ID':
                    try:
                        admin_id = int(value)
                        logger.info(f"‚úÖ ADMIN_USER_ID —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —á–∏—Å–ª–æ: {admin_id}")
                    except ValueError:
                        logger.error(f"‚ùå ADMIN_USER_ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º! –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É!")
        else:
            logger.error(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!")

    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("–î—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for key, value in sorted(os.environ.items()):
        if key not in critical_vars:
            logger.debug(f" - {key}: {value}")

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π"""
    print_separator("–ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–ê –ú–û–î–£–õ–ï–ô")
    
    modules_to_check = [
        ('cloud_run_adapter', 'HTTP-–∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è Cloud Run'),
        ('reminder_system', '–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'),
        ('app.reminder_system', '–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—á–µ—Ä–µ–∑ app)'),
        ('app.bot', '–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –±–æ—Ç–∞'),
        ('aiogram', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Telegram Bot API'),
        ('sqlite3', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ SQLite'),
        ('aiohttp', 'HTTP-–∫–ª–∏–µ–Ω—Ç/—Å–µ—Ä–≤–µ—Ä'),
    ]
    
    for module_name, description in modules_to_check:
        try:
            module = __import__(module_name)
            if hasattr(module, '__version__'):
                version = module.__version__
                logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç {module_name} —É—Å–ø–µ—à–µ–Ω (–≤–µ—Ä—Å–∏—è {version}) - {description}")
            else:
                logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç {module_name} —É—Å–ø–µ—à–µ–Ω - {description}")
        except ImportError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module_name} - {description}: {e}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {module_name}: {e}")
            logger.error(traceback.format_exc())

def verify_telegram_token():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ Telegram Bot API"""
    print_separator("–ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê TELEGRAM")
    
    bot_token = os.environ.get('BOT_TOKEN')
    
    if not bot_token:
        logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!")
        return
    
    try:
        import requests
        
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Telegram...")
        url = f"https://api.telegram.org/bot{bot_token}/getMe"
        
        response = requests.get(url, timeout=10)
        logger.info(f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        data = response.json()
        logger.info(f"–û—Ç–≤–µ—Ç API: {json.dumps(data, indent=2, ensure_ascii=False)}")
        
        if response.status_code == 200 and data.get('ok'):
            bot_info = data.get('result', {})
            logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:")
            logger.info(f" - ID: {bot_info.get('id')}")
            logger.info(f" - –ò–º—è: {bot_info.get('first_name')}")
            logger.info(f" - Username: @{bot_info.get('username')}")
        else:
            logger.error(f"‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω! –û—à–∏–±–∫–∞: {data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
        logger.error(traceback.format_exc())

def check_http_server():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Cloud Run"""
    print_separator("–ü–†–û–í–ï–†–ö–ê HTTP-–°–ï–†–í–ï–†–ê")
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª—å cloud_run_adapter
        import cloud_run_adapter
        
        logger.info("‚úÖ –ú–æ–¥—É–ª—å cloud_run_adapter —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
        if hasattr(cloud_run_adapter, 'start_http_server'):
            logger.info("‚úÖ –§—É–Ω–∫—Ü–∏—è start_http_server –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥—É–ª–µ")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
            if hasattr(cloud_run_adapter, 'PORT'):
                port = getattr(cloud_run_adapter, 'PORT')
                if port == 8080:
                    logger.info("‚úÖ –ü–æ—Ä—Ç HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ 8080")
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ—Ä—Ç HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ {port}, –Ω–æ Cloud Run –æ–∂–∏–¥–∞–µ—Ç 8080")
        else:
            logger.error("‚ùå –§—É–Ω–∫—Ü–∏—è start_http_server –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥—É–ª–µ cloud_run_adapter")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ start.py
        if os.path.exists('start.py'):
            logger.info("‚úÖ –§–∞–π–ª start.py –Ω–∞–π–¥–µ–Ω")
            try:
                with open('start.py', 'r', encoding='utf-8') as f:
                    content = f.read()
                    if 'cloud_run_adapter' in content and 'start_http_server' in content:
                        logger.info("‚úÖ –§–∞–π–ª start.py —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—ã–∑–æ–≤ cloud_run_adapter.start_http_server")
                    else:
                        logger.warning("‚ö†Ô∏è –§–∞–π–ª start.py –º–æ–∂–µ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Cloud Run")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ start.py: {e}")
        else:
            logger.error("‚ùå –§–∞–π–ª start.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ImportError:
        logger.error("‚ùå –ú–æ–¥—É–ª—å cloud_run_adapter –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ HTTP-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
        logger.error(traceback.format_exc())

def check_file_permissions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"""
    print_separator("–ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê")
    
    critical_paths = [
        '.',
        './app',
        './app/bot.py',
        './start.py',
        './cloud_run_adapter.py'
    ]
    
    for path in critical_paths:
        if os.path.exists(path):
            try:
                # –î–ª—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è
                if os.path.isfile(path):
                    with open(path, 'r') as f:
                        first_line = f.readline().strip()
                    logger.info(f"‚úÖ –§–∞–π–ª {path} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è: {first_line[:30]}...")
                # –î–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ª–∏—Å—Ç–∏–Ω–≥–∞
                else:
                    items = os.listdir(path)
                    logger.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {path} –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è ({len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
            except PermissionError:
                logger.error(f"‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ {path}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {path}: {e}")
        else:
            logger.warning(f"‚ö†Ô∏è –ü—É—Ç—å {path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def check_dockerfile():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Dockerfile"""
    print_separator("–ü–†–û–í–ï–†–ö–ê DOCKERFILE")
    
    if os.path.exists('Dockerfile'):
        try:
            with open('Dockerfile', 'r') as f:
                content = f.read()
                
            logger.info("–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Dockerfile...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞
            if 'FROM python:3.11' in content:
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Python 3.11")
            else:
                logger.warning("‚ö†Ô∏è –ú–æ–∂–µ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python 3.11")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è reminder_system.py
            if '/usr/local/lib/python3.11/site-packages/app/' in content and 'reminder_system.py' in content:
                logger.info("‚úÖ –ö–æ–ø–∏—Ä—É–µ—Ç reminder_system.py –≤ –ø—É—Ç—å Python")
            else:
                logger.warning("‚ö†Ô∏è –ú–æ–∂–µ—Ç –Ω–µ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å reminder_system.py –≤ –ø—É—Ç—å Python")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
            if 'EXPOSE 8080' in content:
                logger.info("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç 8080")
            else:
                logger.warning("‚ö†Ô∏è –ú–æ–∂–µ—Ç –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç 8080")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞
            if 'CMD ["python"' in content and 'start.py' in content:
                logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç start.py")
            else:
                logger.warning("‚ö†Ô∏è –ú–æ–∂–µ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å start.py")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Dockerfile: {e}")
    else:
        logger.error("‚ùå Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω")

def diagnose_database():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print_separator("–ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    
    db_paths = [
        './app/bot_database.db',
        './bot_database.db',
        './database.db'
    ]
    
    db_found = False
    
    for db_path in db_paths:
        if os.path.exists(db_path):
            db_found = True
            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
            
            try:
                import sqlite3
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                tables = cursor.fetchall()
                
                if tables:
                    logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç {len(tables)} —Ç–∞–±–ª–∏—Ü:")
                    for table in tables:
                        table_name = table[0]
                        logger.info(f" - {table_name}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                        cursor.execute(f"PRAGMA table_info({table_name})")
                        columns = cursor.fetchall()
                        logger.info(f"   –ö–æ–ª–æ–Ω–∫–∏ ({len(columns)}):")
                        for col in columns:
                            logger.info(f"   - {col[1]} ({col[2]})")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                        count = cursor.fetchone()[0]
                        logger.info(f"   –ó–∞–ø–∏—Å–µ–π: {count}")
                else:
                    logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü")
                
                conn.close()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {db_path}: {e}")
                logger.error(traceback.format_exc())
    
    if not db_found:
        logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–µ—Å—Ç–∞—Ö")

async def run_http_server():
    """–ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Cloud Run"""
    port = int(os.getenv("PORT", 8080))
    logger.info(f"–ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Cloud Run")
    
    async def health_handler(request):
        return web.Response(text="Debug server is running")
    
    async def debug_handler(request):
        # –°–±–æ—Ä –≤—Å–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            diagnose_system()
            diagnose_env_variables()
            check_imports()
            check_file_permissions()
            
            # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è JSON-–æ—Ç–≤–µ—Ç–∞
            system_info = {
                "python_version": sys.version,
                "platform": platform.platform(),
                "current_directory": os.getcwd(),
                "directory_contents": os.listdir('.') if os.path.exists('.') else [],
                "parent_directory_contents": os.listdir('..') if os.path.exists('..') else [],
                "python_path": sys.path,
                "environment_variables": {k: ("[HIDDEN]" if k in ["BOT_TOKEN", "ADMIN_USER_ID"] else v) for k, v in os.environ.items()},
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            file_paths = [
                "/app/reminder_system.py",
                "/usr/local/lib/python3.11/site-packages/reminder_system.py",
                "/usr/local/lib/python3.11/site-packages/app/reminder_system.py",
                "../start.py",
                "../cloud_run_adapter.py",
                "bot.py"
            ]
            system_info["file_checks"] = {path: os.path.exists(path) for path in file_paths}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏–º–ø–æ—Ä—Ç–∞
            import_tests = {}
            try:
                import reminder_system
                import_tests["reminder_system"] = {
                    "success": True, 
                    "file": getattr(reminder_system, "__file__", "Unknown")
                }
            except ImportError as e:
                import_tests["reminder_system"] = {"success": False, "error": str(e)}
                
            try:
                from app.reminder_system import ReminderSystem
                import_tests["app.reminder_system"] = {"success": True}
            except ImportError as e:
                import_tests["app.reminder_system"] = {"success": False, "error": str(e)}
            
            system_info["import_tests"] = import_tests
            
            return web.json_response(system_info)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—Ç–ª–∞–¥–∫–∏: {e}")
            logger.error(traceback.format_exc())
            return web.Response(text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {e}", status=500)
    
    app = web.Application()
    app.router.add_get("/", health_handler)
    app.router.add_get("/health", health_handler)
    app.router.add_get("/debug", debug_handler)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    
    logger.info(f"HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{port}")
    logger.info("–î–æ—Å—Ç—É–ø –∫ /debug –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    
    # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
    while True:
        await asyncio.sleep(3600)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print_separator("–ù–ê–ß–ê–õ–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò DOSTUP-BOT")
    logger.info("–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ Cloud Run")
    
    try:
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        diagnose_system()
        diagnose_env_variables()
        check_imports()
        verify_telegram_token()
        check_http_server()
        check_file_permissions()
        check_dockerfile()
        diagnose_database()
        
        print_separator("–ó–ê–í–ï–†–®–ï–ù–ò–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        logger.info("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è.")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        logger.error(traceback.format_exc())

# –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –≤ Cloud Run
if __name__ == "__main__":
    # –ï—Å–ª–∏ –º—ã –≤ Cloud Run (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT), –∑–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
    if "PORT" in os.environ:
        logger.info("–†–∞–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Cloud Run —Å HTTP-—Å–µ—Ä–≤–µ—Ä–æ–º")
        try:
            asyncio.run(run_http_server())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            logger.error(traceback.format_exc())
    else:
        # –ó–∞–ø—É—Å–∫ –æ–±—ã—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –Ω–µ –≤ Cloud Run
        logger.info("–†–∞–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        print_separator("–ù–ê–ß–ê–õ–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        diagnose_system()
        diagnose_env_variables()
        check_imports()
        check_file_permissions()
        print_separator("–ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
